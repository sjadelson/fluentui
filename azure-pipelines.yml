pr:
  - master

trigger:
  - master

variables:
  - group: fabric-variables
  - template: .devops/templates/variables.yml
    parameters:
      pathPrefix: SourceVersion

pool: 'Self Host Ubuntu'

jobs:
  - job: BuildTestLint
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      - script: |
          yarn checkchange
        displayName: check change

      ## manually call this since lage is now used and it calls lint per package, not per repo
      - script: |
          yarn prelint
        displayName: do syncpack and lint-files checks

      ## Danger.js checks for Fluent UI N*
      - script: |
          if [ $BUILD_REASON == "PullRequest" ]; then
            yarn danger ci
          else
            echo "Skipping Danger JS because BUILD_REASON ${BUILD_REASON} != PullRequest"
          fi
        displayName: danger
        env:
          DANGER_GITHUB_API_TOKEN: $(DANGER_GITHUB_API_TOKEN)

      ## only do scoped builds with PRs
      - script: |
          yarn buildci --no-cache --since $(targetBranch)
        displayName: build, test, lint (pr, scoped)
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: $(backfillProvider)
          BACKFILL_CACHE_PROVIDER_OPTIONS: $(backfillOptions)

      ## duplicated build step, but without --since flag for master CI builds
      - script: |
          yarn buildci --no-cache
        displayName: build, test, lint (master)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: $(backfillProvider)
          BACKFILL_CACHE_PROVIDER_OPTIONS: $(backfillOptions)

      - template: .devops/templates/cleanup.yml

  - job: Deploy
    workspace:
      clean: all
    variables:
      - template: .devops/templates/variables.yml
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      ## only do scoped bundle with PRs
      - script: |
          yarn bundle --no-cache --since $(targetBranch)
        displayName: bundle (pr, scoped)
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: $(backfillProvider)
          BACKFILL_CACHE_PROVIDER_OPTIONS: $(backfillOptions)

      ## duplicated for master CI builds
      - script: |
          yarn bundle --no-cache
        displayName: bundle (master)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: $(backfillProvider)
          BACKFILL_CACHE_PROVIDER_OPTIONS: $(backfillOptions)

      ## This runs regardless of scope, the app will adapt to the scope as well
      - script: |
          yarn workspace @uifabric/pr-deploy-site generate:site
        displayName: generate PR Deploy Site

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: Build-PR-$(Build.BuildNumber)

      - task: AzureUpload@2
        displayName: Upload PR deploy site
        inputs:
          azureSubscription: $(azureSubscription)
          BlobPrefix: $(deployBasePath)
          ContainerName: '$web'
          SourcePath: 'apps/pr-deploy-site/dist'
          storage: fabricweb

      - task: GithubPRStatus@0
        displayName: 'Update PR deploy site github status'
        inputs:
          githubOwner: microsoft
          githubRepo: fluentui
          githubContext: 'Pull request demo site'
          githubDescription: 'Click "Details" to go to the deployed demo site for this pull request'
          githubTargetLink: 'http://fabricweb.z5.web.core.windows.net/pr-deploy-site/$(Build.SourceBranch)/'

      - task: AzureUpload@2
        displayName: Upload demo images (master)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          azureSubscription: $(azureSubscription)
          BlobPrefix: 'assets'
          CacheControl: 'public, max-age=600000'
          ContainerName: 'fabric-website' # this container has a CDN
          SourcePath: 'packages/fluentui/docs/src/public'
          storage: fabricweb

      - template: .devops/templates/cleanup.yml

  - job: ScreenerFluent
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      - script: yarn workspace @fluentui/docs vr:build
        displayName: build FUI N* VR Test

      - task: AzureUpload@2
        displayName: Upload N* doc site
        inputs:
          azureSubscription: $(azureSubscription)
          BlobPrefix: '$(deployBasePath)/react-northstar'
          CacheControl: 'public, max-age=600000'
          ContainerName: '$web'
          SourcePath: 'packages/fluentui/docs/dist'
          storage: fabricweb

      - script: yarn workspace @fluentui/docs vr:test
        displayName: start FUI N* VR Test
        env:
          SCREENER_API_KEY: $(screener.key)

      - template: .devops/templates/cleanup.yml

  - job: Screener
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      - script: |
          yarn lage screener --to vr-tests --debug --verbose --no-cache
        displayName: run VR Test
        env:
          SCREENER_API_KEY: $(screener.key)
          BACKFILL_CACHE_PROVIDER: $(backfillProvider)
          BACKFILL_CACHE_PROVIDER_OPTIONS: $(backfillOptions)

      - template: .devops/templates/cleanup.yml
